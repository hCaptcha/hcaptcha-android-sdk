plugins {
    id "pmd"
    id "jacoco"
    id "checkstyle"
    id "com.github.spotbugs" version "4.8.0"
    id "org.owasp.dependencycheck" version "7.1.1"
    id "org.sonarqube" version "3.4.0.2513"
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"
    namespace 'com.hcaptcha.sdk'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 33

        // See https://developer.android.com/studio/publish/versioning
        // versionCode must be integer and be incremented by one for every new update
        // android system uses this to prevent downgrades
        versionCode 25

        // version number visible to the user
        // should follow semantic versioning (See https://semver.org)
        versionName "3.3.7"

        buildConfigField 'String', 'VERSION_NAME', "\"${defaultConfig.versionName}_${defaultConfig.versionCode}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        multiDexEnabled true
    }

    compileOptions {
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
        }
    }

    testOptions {
        animationsDisabled = true
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleDependency
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-inline:3.6.28'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'

    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.5.1'
    androidTestImplementation 'androidx.fragment:fragment-testing:1.4.1' // cannot upgrade because https://issuetracker.google.com/issues/266687550

    androidTestImplementation "androidx.multidex:multidex:2.0.1"
    androidTestImplementation "org.mockito:mockito-android:3.6.28"

    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
}

project.afterEvaluate {
    publishing {
        repositories {
        }

        publications {
            release(MavenPublication) {
                from components.release

                groupId = 'com.hcaptcha'
                artifactId = 'sdk'
                version = android.defaultConfig.versionName

                pom {
                    name = 'Android SDK hCaptcha'
                    description = 'This SDK provides a wrapper for hCaptcha and is a drop-in replacement for the SafetyNet reCAPTCHA API.'
                    url = 'https://github.com/hCaptcha/hcaptcha-android-sdk'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/hCaptcha/hcaptcha-android-sdk/blob/main/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'sergiu'
                            name = 'Sergiu Danalachi'
                            email = 'sergiu@intuitionmachines.com'
                            organization = 'hCaptcha'
                            organizationUrl = 'https://www.hcaptcha.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/hCaptcha/hcaptcha-android-sdk.git'
                        developerConnection = 'scm:git:ssh://github.com:hCaptcha/hcaptcha-android-sdk.git'
                        url = 'https://github.com/hCaptcha/hcaptcha-android-sdk'
                    }
                }
            }
        }
    }
}

long MAX_AAR_SIZE_KB = 200

android.libraryVariants.all { variant ->
    def variantName = variant.name.capitalize()
    project.task("report${variantName}AarSize") {
        group 'Help'
        description "Report ${variant.name} AAR size"
        dependsOn variant.packageLibraryProvider

        doFirst {
            String aarPath = variant.packageLibraryProvider.get().archivePath
            long aarSizeKb = file(aarPath).length() / 1024
            println("File ${aarPath} is ${aarSizeKb}Kbyte")
        }
    }

    project.tasks.findByName("check").dependsOn(project.task("check${variantName}AarSize") {
        group 'Verification'
        description "Checks ${variant.name} AAR size doesn't exceed ${MAX_AAR_SIZE_KB}Kb"
        dependsOn variant.packageLibraryProvider

        doFirst {
            String aarPath = variant.packageLibraryProvider.get().archivePath
            long aarSizeKb = file(aarPath).length() / 1024
            if (aarSizeKb > MAX_AAR_SIZE_KB) {
                throw new GradleException("${aarPath} size exceeded! ${aarSizeKb}Kbyte > ${MAX_AAR_SIZE_KB}Kbyte")
            }
        }
    })

    def packageName = "com.hcaptcha.sdk"
    def outputDir = file("${project.buildDir}/generated/source/hcaptcha/${variant.name}/${packageName.replaceAll('\\.', '/')}")
    def generateTask = project.task("genarate${variantName}JavaClassFromStaticHtml") {
        group 'Generate'
        description "Generate HTML java class"

        doFirst {
            def outputJavaClass = file("$outputDir/HCaptchaHtml.java")
            def template = file("$projectDir/src/main/html/HCaptchaHtml.java.tml").text
            def html = file("$projectDir/src/main/html/hcaptcha.html")
                    .readLines()
                    .stream()
                    .map({l -> "\"${l.replaceAll('"', '\\\\"')}\\n\""})
                    .collect(java.util.stream.Collectors.joining("\n${' ' * 16}+ "))

            def engine = new groovy.text.SimpleTemplateEngine()
            def src = engine.createTemplate(template).make([
                    "htmlContent": html,
                    "packageName": packageName
            ])

            outputDir.mkdirs()
            outputJavaClass.write(src.toString())
        }
    }

    // preBuild.dependsOn generateTask
    variant.registerJavaGeneratingTask(generateTask, outputDir)
}

checkstyle {
    toolVersion = '8.45.1'
}

task checkstyle(type: Checkstyle) {
    description 'Check code standard'
    group 'verification'
    configFile file("${rootDir}/gradle/config/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
    ignoreFailures = false
    maxWarnings = 0
}

pmd {
    consoleOutput = true
    toolVersion = "6.51.0"
}

task pmd(type: Pmd) {
    ruleSetFiles = files("${project.rootDir}/gradle/config/pmd.xml")
    ignoreFailures = false
    ruleSets = []
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    reports {
        xml.required = false
        xml.outputLocation = file("${project.buildDir}/reports/pmd/pmd.xml")
        html.required = true
        html.outputLocation = file("$project.buildDir/outputs/pmd/pmd.html")
    }
}

spotbugs {
    ignoreFailures = false
    showStackTraces = true
    showProgress = false
    reportLevel = 'high'
    excludeFilter = file("${project.rootDir}/gradle/config/findbugs-exclude.xml")
    onlyAnalyze = ['com.hcaptcha.sdk.*']
    projectName = name
    release = version
}

// enable html report
gradle.taskGraph.beforeTask { task ->
    if (task.name.toLowerCase().contains('spotbugs')) {
        task.reports {
            html.enabled = true
            xml.enabled = true
        }
    }
}

// https://www.rallyhealth.com/coding/code-coverage-for-android-testing
task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    def coverageSourceDirs = [
        "src/main/java"
    ]
    def javaClasses = fileTree(
        dir: "${project.buildDir}/intermediates/javac/debug/classes",
        excludes: [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*'
        ]
    )

    classDirectories.from files([javaClasses])
    additionalSourceDirs.from files(coverageSourceDirs)
    sourceDirectories.from files(coverageSourceDirs)
    executionData.from = "${project.buildDir}/jacoco/testDebugUnitTest.exec"

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn('checkstyle', 'pmd', 'jacocoUnitTestReport')

sonarqube {
    properties {
        property "sonar.projectKey", "hCaptcha_hcaptcha-android-sdk"
        property "sonar.organization", "hcaptcha"
        property "sonar.host.url", "https://sonarcloud.io"

        property "sonar.language", "java"
        property "sonar.sourceEncoding", "utf-8"

        property "sonar.sources", "src/main"
        property "sonar.java.binaries", "${project.buildDir}/intermediates/javac/debug/classes"
        property "sonar.tests", ["src/test/", "src/androidTest/"]

        property "sonar.android.lint.report", "${project.buildDir}/outputs/lint-results.xml"
        property "sonar.java.spotbugs.reportPaths", ["${project.buildDir}/reports/spotbugs/debug.xml", "${project.buildDir}/reports/spotbugs/release.xml"]
        property "sonar.java.pmd.reportPaths", "${project.buildDir}/reports/pmd/pmd.xml"
        property "sonar.java.checkstyle.reportPaths", "${project.buildDir}/reports/checkstyle/checkstyle.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/jacocoUnitTestReport.xml"
    }
}

project.tasks["sonarqube"].dependsOn "check"
