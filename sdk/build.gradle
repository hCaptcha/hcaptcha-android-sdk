plugins {
    id "com.android.library"
    id "maven-publish"
    id "pmd"
    id "jacoco"
    id "checkstyle"
    id "com.github.spotbugs" version "5.2.3"
    id "org.owasp.dependencycheck" version "7.1.1"
    id "org.sonarqube" version "3.4.0.2513"
    id "de.undercouch.download" version "5.5.0"
}

ext {
    hcaptchaLoaderVersion = "1.2.4"
}

android {
    compileSdk 34
    namespace 'com.hcaptcha.sdk'

    buildFeatures {
        buildConfig true
    }

    defaultConfig {
        minSdkVersion 16 // Android 4.1
        targetSdkVersion 34

        // See https://developer.android.com/studio/publish/versioning
        // versionCode must be integer and be incremented by one for every new update
        // android system uses this to prevent downgrades
        versionCode 39

        // version number visible to the user
        // should follow semantic versioning (See https://semver.org)
        versionName "4.0.0"

        buildConfigField 'String', 'VERSION_NAME', "\"${defaultConfig.versionName}_${defaultConfig.versionCode}\""
        buildConfigField 'String', 'LOADER_VERSION', "\"${hcaptchaLoaderVersion}\""

        consumerProguardFiles "consumer-rules.pro"
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }

    compileOptions {
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
        }
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    //noinspection GradleDependency
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-inline:4.8.1'
    testImplementation 'org.skyscreamer:jsonassert:1.5.1'

    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
}

project.afterEvaluate {
    publishing {
        repositories {
        }

        publications {
            release(MavenPublication) {
                from components.release

                groupId = 'com.hcaptcha'
                artifactId = 'sdk'
                version = android.defaultConfig.versionName

                pom {
                    name = 'Android SDK hCaptcha'
                    description = 'This SDK provides a wrapper for hCaptcha and is a drop-in replacement for the SafetyNet reCAPTCHA API.'
                    url = 'https://github.com/hCaptcha/hcaptcha-android-sdk'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/hCaptcha/hcaptcha-android-sdk/blob/main/LICENSE'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/hCaptcha/hcaptcha-android-sdk.git'
                        developerConnection = 'scm:git:ssh://github.com:hCaptcha/hcaptcha-android-sdk.git'
                        url = 'https://github.com/hCaptcha/hcaptcha-android-sdk'
                    }
                }
            }
        }
    }
}

long MAX_AAR_SIZE_KB = 250

String sha256Integrity(String filename) {
    def file = new File("${buildDir}/generated/assets/hcaptcha/${filename}")
    def sha256Hash = file.withInputStream { stream ->
        org.apache.commons.codec.digest.DigestUtils.sha256(stream)
    }
    def base64Hash = org.apache.commons.codec.binary.Base64.encodeBase64String(sha256Hash)

    return "sha256-${base64Hash}"
}

tasks.register('downloadPolyfillsJs', Download) {
    src "https://www.unpkg.com/@hcaptcha/loader@${hcaptchaLoaderVersion}/dist/polyfills.js"
    dest layout.buildDirectory.file("generated/assets/hcaptcha/polyfills.js")
    onlyIfModified true
}

tasks.register('downloadHCaptchaLoaderJs', Download) {
    src "https://www.unpkg.com/@hcaptcha/loader@${hcaptchaLoaderVersion}/dist/index.es5.js"
    dest layout.buildDirectory.file("generated/assets/hcaptcha/loader.js")
    onlyIfModified true
}.get().dependsOn('downloadPolyfillsJs')

android.sourceSets.main.assets.srcDirs += [layout.buildDirectory.file("generated/assets")]

android.libraryVariants.all { variant ->
    def variantName = variant.name.capitalize()
    project.task("report${variantName}AarSize") {
        group 'Help'
        description "Report ${variant.name} AAR size"
        dependsOn variant.packageLibraryProvider

        doFirst {
            var aarPath = variant.packageLibraryProvider.get().archiveFile.get().getAsFile()
            long aarSizeKb = aarPath.length() / 1024
            println("File ${aarPath} is ${aarSizeKb}Kbyte")
        }
    }

    project.tasks.findByName("check").dependsOn(project.task("check${variantName}AarSize") {
        group 'Verification'
        description "Checks ${variant.name} AAR size doesn't exceed ${MAX_AAR_SIZE_KB}Kb"
        dependsOn variant.packageLibraryProvider

        doFirst {
            var aarFile = variant.packageLibraryProvider.get().archiveFile.get().getAsFile()
            long aarSizeKb = aarFile.length() / 1024
            if (aarSizeKb > MAX_AAR_SIZE_KB) {
                throw new GradleException("${aarFile} size exceeded! ${aarSizeKb}Kbyte > ${MAX_AAR_SIZE_KB}Kbyte")
            }
        }
    })

    def packageName = "com.hcaptcha.sdk"
    def outputDir = file("${project.buildDir}/generated/source/hcaptcha/${variant.name}/${packageName.replaceAll('\\.', '/')}")
    def generateTask = project.task("generate${variantName}JavaClassFromStaticHtml") {
        group 'Generate'
        description "Generate HTML java class"

        doFirst {
            def outputJavaClass = file("$outputDir/HCaptchaHtml.java")
            def template = file("$projectDir/src/main/html/HCaptchaHtml.java.tml").text
            def polyfillsIntegrity = sha256Integrity('polyfills.js')
            def loaderIntegrity = sha256Integrity('loader.js')
            def html = file("$projectDir/src/main/html/hcaptcha.html")
                    .readLines()
                    .stream()
                    .map({l -> "${l.replaceAll('@LOADER_VERSION@', hcaptchaLoaderVersion)}"})
                    .map({l -> "${l.replaceAll('@POLYFILLS_INTEGRITY@', polyfillsIntegrity)}"})
                    .map({l -> "${l.replaceAll('@LOADER_INTEGRITY@', loaderIntegrity)}"})
                    .map({l -> "\"${l.replaceAll('"', '\\\\"')}\\n\""})
                    .collect(java.util.stream.Collectors.joining("\n${' ' * 16}+ "))

            def engine = new groovy.text.SimpleTemplateEngine()
            def src = engine.createTemplate(template).make([
                    "htmlContent": html,
                    "packageName": packageName
            ])

            outputDir.mkdirs()
            outputJavaClass.write(src.toString())
        }
    }

    variant.registerJavaGeneratingTask(generateTask, outputDir)
    generateTask.dependsOn(downloadHCaptchaLoaderJs)

    tasks.named("package${variant.name.capitalize()}Assets")
            .get()
            .dependsOn(downloadHCaptchaLoaderJs)
    tasks.named("merge${variant.name.capitalize()}Assets")
            .get()
            .dependsOn(downloadHCaptchaLoaderJs)
}

apply from: "$rootProject.projectDir/gradle/shared/code-quality.gradle"