plugins {
    id 'com.android.library'
    id 'androidx.benchmark'
}

android {
    compileSdkVersion 32

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 32

        testInstrumentationRunner 'androidx.benchmark.junit4.AndroidBenchmarkRunner'
        testInstrumentationRunnerArguments["no-isolated-storage"] = true
        testInstrumentationRunnerArguments["additionalTestOutputDir"] = "/sdcard/Download"
        testInstrumentationRunnerArguments["androidx.benchmark.suppressErrors"] = "DEBUGGABLE,EMULATOR,LOW-BATTERY,UNLOCKED"
    }

    testBuildType = "release"
    buildTypes {
        debug {
            // Since debuggable can"t be modified by gradle for library modules,
            // it must be done in a manifest - see src/androidTest/AndroidManifest.xml
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "benchmark-proguard-rules.pro"
        }
        release {
            isDefault = true
        }
    }
}

dependencies {
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.benchmark:benchmark-junit4:1.1.0'

    implementation project(path: ':sdk')
    implementation 'androidx.appcompat:appcompat:1.5.0'
}

task downloadBechmarkOutput {
    def packageName = "com.hcaptcha.sdk.bench.test"
    // def output = "${project.buildDir}/outputs/connected_android_test_additional_output/"
    def output = "/sdcard/Download"
    def stdout = new ByteArrayOutputStream()
    doFirst {
        try {
            project.file(output).mkdirs()
            exec {
                standardOutput = stdout
                commandLine android.getAdbExe(), 'pull',
                        "/storage/emulated/0/Android/media/${packageName}/${packageName}-benchmarkData.json",
                        output
            }
            println "Check ${output} for benchmark output"
        } catch (e) {
            println stdout.toString()
            throw e
        }
    }
}