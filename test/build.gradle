apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'

if (project.hasProperty("testingMinimizedBuild")) {
    apply plugin: 'com.slack.keeper'
}

android {
    compileSdk 34
    namespace 'com.hcaptcha.sdk.test'

    defaultConfig {
        applicationId "com.hcaptcha.sdk.test"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../sdk/consumer-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testBuildType project.hasProperty("testingMinimizedBuild") ? "release" : "debug"
    testOptions {
        animationsDisabled = true
    }

    buildFeatures {
        compose = true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "$compose_version"
    }
}

if (project.hasProperty("testingMinimizedBuild")) {
    project.afterEvaluate {
        tasks.register("postInferReleaseAndroidTestKeepRulesForKeeper") {
            doLast {
                def sourceFile = file("${projectDir}/test-proguard-rules.pro")
                def destinationFile = fileTree(dir: "${project.buildDir}/intermediates/keeper", include: '**/inferredKeepRules.pro').find { true }

                if (sourceFile.exists() && destinationFile.exists()) {
                    def sourceText = sourceFile.text
                    destinationFile << sourceText
                    println("Rules from of ${sourceFile} appended too keeper")
                } else {
                    if (!sourceFile.exists()) {
                        throw new GradleException("Proguard file does not exist: ${sourceFile}")
                    }
                    if (!destinationFile.exists()) {
                        throw new GradleException("Keeper's proguard file does not exist: ${destinationFile}")
                    }
                }
            }
        }

        tasks.named("inferReleaseAndroidTestKeepRulesForKeeper").configure {
            finalizedBy(tasks.named("postInferReleaseAndroidTestKeepRulesForKeeper"))
        }
    }
}

androidComponents {
    beforeVariants(selector().all()) { variantBuilder ->
        if (variantBuilder.name == "release") {
            variantBuilder.registerExtension(
                    com.slack.keeper.KeeperVariantMarker.class,
                    com.slack.keeper.KeeperVariantMarker.INSTANCE)
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.13.2'

    implementation project(path: ':sdk')
    implementation 'androidx.appcompat:appcompat:1.6.1'
    androidTestImplementation 'androidx.fragment:fragment-testing:1.6.2'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.5.1'
    androidTestImplementation 'org.mockito:mockito-android:5.3.1'

    implementation project(path: ':compose-sdk')
    implementation 'androidx.compose.material3:material3:1.2.1'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.foundation:foundation-layout-android:$compose_version"
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4-android:1.6.8'
}
